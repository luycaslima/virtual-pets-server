// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "lucasl22l@proton.me"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/pets": {
            "post": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "Creates a pet with a specific Species and a Name passed by the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pet"
                ],
                "summary": "Create a Pet",
                "operationId": "create-a-pet",
                "parameters": [
                    {
                        "description": "Create a Pet",
                        "name": "pet",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreatePetBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pet linked successfuly",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "This pet has other owner!",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "User/Pet not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failure on the Server",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/api/users/login": {
            "post": {
                "description": "Login an User with a Username and Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login an User",
                "operationId": "login-an-user",
                "parameters": [
                    {
                        "description": "Logs an User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged User and return JWT cookie",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid body",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failure in the Database",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/api/users/logout": {
            "post": {
                "description": "Logout current logged in user by expiring his Jwt auth",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Logout an User",
                "operationId": "logout-an-user",
                "responses": {
                    "200": {
                        "description": "Logout successfuly!",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failure on the Server",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/api/users/pet/{petID}": {
            "put": {
                "security": [
                    {
                        "jwt": []
                    }
                ],
                "description": "When creating a pet successfully, this functions link to the user that it created based on the JWT",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Link a created Pet to an User",
                "operationId": "link-a-pet-to-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Pet ID",
                        "name": "petID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pet linked successfuly",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "401": {
                        "description": "This pet has other owner!",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "404": {
                        "description": "User/Pet not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failure on the Server",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/api/users/register": {
            "post": {
                "description": "Register a new User with a Username, Email and Password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register a new User",
                "operationId": "register-a-user",
                "parameters": [
                    {
                        "description": "Register a new User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterAnUserBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created!",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid Body",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failure in the Database",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/api/users/{username}": {
            "get": {
                "description": "Receives Details from a specific User (without password)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get an User Details (Profile)",
                "operationId": "get-an-user-profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's name",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Details",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    },
                    "500": {
                        "description": "Failure on the Server",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreatePetBody": {
            "type": "object",
            "required": [
                "petName",
                "specieID"
            ],
            "properties": {
                "petName": {
                    "type": "string"
                },
                "specieID": {
                    "type": "string"
                }
            }
        },
        "models.RegisterAnUserBody": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ronald@email.com"
                },
                "password": {
                    "type": "string",
                    "example": "aksdmalknj@154/JKNJ"
                },
                "username": {
                    "type": "string",
                    "example": "ronald123"
                }
            }
        },
        "models.User": {
            "description": "User represents the model  for an User's Data, password is ALWAYS HASHED",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "ronald@email.com"
                },
                "id": {
                    "description": "Users ID generated by Mongodb\nIn: path",
                    "type": "string",
                    "example": "1"
                },
                "money": {
                    "type": "integer",
                    "example": 500000
                },
                "password": {
                    "type": "string",
                    "example": "aksdmalknj@154/JKNJ"
                },
                "pets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "username": {
                    "type": "string",
                    "example": "ronald123"
                },
                "vivarium": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.UserCredentials": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "example": "aksdmalknj@154/JKNJ"
                },
                "username": {
                    "type": "string",
                    "example": "ronald123"
                }
            }
        },
        "responses.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Virtual Pets",
	Description:      "This is the API for setting the REST functions of the Virtual Pets, JWT in Swag has no good suppert . so sadly the AUTH is not working and need a migration",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
